import { getProvider } from '../../helpers'

static const EMPTY_OBJECT = {};

static const noop = function() {};

class {
  sync(state) {
    this.setState(state);
    this.update();
  }
  onCreate() {
    this.sync = this.sync.bind(this);
  }
  onInput(input, out) {
    var type = input.__from;

    if (!type || !type.render) {
      throw new Error(
        "Invalid component constructor provided as <context> 'from' attribute. Got: " +
          type
      );
    }

    var provider = getProvider(out, type);

    if (provider) {
      this.state = provider.data;
      this.emitToProvider = provider.emit && provider.emit.bind(provider);

      if (typeof window !== "undefined" && typeof this.subscribeTo !== "undefined") {
        if (this.sub) this.sub.removeAllListeners();
        this.sub = this.subscribeTo(provider).on("__change", this.sync);
      }
    }
  }
}

$ const attrs = state || EMPTY_OBJECT;
$ const emit = component.emitToProvider || noop;
<${input}(attrs, emit)/>
